// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"errors"
	"fmt"
)

const (
	// MIMEText is a MIME of type text.
	MIMEText MIME = "text/plain"
	// MIMEJson is a MIME of type json.
	MIMEJson MIME = "application/json"
	// MIMEPng is a MIME of type png.
	MIMEPng MIME = "image/png"
	// MIMEJpeg is a MIME of type jpeg.
	MIMEJpeg MIME = "image/jpeg"
	// MIMEJpg is a MIME of type jpg.
	MIMEJpg MIME = "image/jpg"
	// MIMEWebp is a MIME of type webp.
	MIMEWebp MIME = "image/webp"
	// MIMEGif is a MIME of type gif.
	MIMEGif MIME = "image/gif"
)

var ErrInvalidMIME = errors.New("not a valid MIME")

// String implements the Stringer interface.
func (x MIME) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MIME) IsValid() bool {
	_, err := ParseMIME(string(x))
	return err == nil
}

var _MIMEValue = map[string]MIME{
	"text/plain":       MIMEText,
	"application/json": MIMEJson,
	"image/png":        MIMEPng,
	"image/jpeg":       MIMEJpeg,
	"image/jpg":        MIMEJpg,
	"image/webp":       MIMEWebp,
	"image/gif":        MIMEGif,
}

// ParseMIME attempts to convert a string to a MIME.
func ParseMIME(name string) (MIME, error) {
	if x, ok := _MIMEValue[name]; ok {
		return x, nil
	}
	return MIME(""), fmt.Errorf("%s is %w", name, ErrInvalidMIME)
}

const (
	// RoleUser is a Role of type user.
	RoleUser Role = "user"
	// RoleAssistant is a Role of type assistant.
	RoleAssistant Role = "assistant"
	// RoleToolCall is a Role of type toolCall.
	RoleToolCall Role = "toolCall"
	// RoleToolResult is a Role of type toolResult.
	RoleToolResult Role = "toolResult"
)

var ErrInvalidRole = errors.New("not a valid Role")

// String implements the Stringer interface.
func (x Role) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, err := ParseRole(string(x))
	return err == nil
}

var _RoleValue = map[string]Role{
	"user":       RoleUser,
	"assistant":  RoleAssistant,
	"toolCall":   RoleToolCall,
	"toolResult": RoleToolResult,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(""), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}
