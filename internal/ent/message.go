// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/pikocloud/pikobrain/internal/ent/message"
	"github.com/pikocloud/pikobrain/internal/providers/types"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Thread holds the value of the "thread" field.
	Thread string `json:"thread,omitempty"`
	// ToolName holds the value of the "tool_name" field.
	ToolName string `json:"tool_name,omitempty"`
	// ToolID holds the value of the "tool_id" field.
	ToolID string `json:"tool_id,omitempty"`
	// Role holds the value of the "role" field.
	Role types.Role `json:"role,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Mime holds the value of the "mime" field.
	Mime types.MIME `json:"mime,omitempty"`
	// Content holds the value of the "content" field.
	Content []byte `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldContent:
			values[i] = new([]byte)
		case message.FieldID:
			values[i] = new(sql.NullInt64)
		case message.FieldThread, message.FieldToolName, message.FieldToolID, message.FieldUser:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.FieldMime:
			values[i] = new(types.MIME)
		case message.FieldRole:
			values[i] = new(types.Role)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldThread:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thread", values[i])
			} else if value.Valid {
				m.Thread = value.String
			}
		case message.FieldToolName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool_name", values[i])
			} else if value.Valid {
				m.ToolName = value.String
			}
		case message.FieldToolID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool_id", values[i])
			} else if value.Valid {
				m.ToolID = value.String
			}
		case message.FieldRole:
			if value, ok := values[i].(*types.Role); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value != nil {
				m.Role = *value
			}
		case message.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				m.User = value.String
			}
		case message.FieldMime:
			if value, ok := values[i].(*types.MIME); !ok {
				return fmt.Errorf("unexpected type %T for field mime", values[i])
			} else if value != nil {
				m.Mime = *value
			}
		case message.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				m.Content = *value
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("thread=")
	builder.WriteString(m.Thread)
	builder.WriteString(", ")
	builder.WriteString("tool_name=")
	builder.WriteString(m.ToolName)
	builder.WriteString(", ")
	builder.WriteString("tool_id=")
	builder.WriteString(m.ToolID)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", m.Role))
	builder.WriteString(", ")
	builder.WriteString("user=")
	builder.WriteString(m.User)
	builder.WriteString(", ")
	builder.WriteString("mime=")
	builder.WriteString(fmt.Sprintf("%v", m.Mime))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", m.Content))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
