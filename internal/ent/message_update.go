// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/pikocloud/pikobrain/internal/ent/message"
	"github.com/pikocloud/pikobrain/internal/ent/predicate"
	"github.com/pikocloud/pikobrain/internal/providers/types"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetThread sets the "thread" field.
func (mu *MessageUpdate) SetThread(s string) *MessageUpdate {
	mu.mutation.SetThread(s)
	return mu
}

// SetNillableThread sets the "thread" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableThread(s *string) *MessageUpdate {
	if s != nil {
		mu.SetThread(*s)
	}
	return mu
}

// SetToolName sets the "tool_name" field.
func (mu *MessageUpdate) SetToolName(s string) *MessageUpdate {
	mu.mutation.SetToolName(s)
	return mu
}

// SetNillableToolName sets the "tool_name" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableToolName(s *string) *MessageUpdate {
	if s != nil {
		mu.SetToolName(*s)
	}
	return mu
}

// ClearToolName clears the value of the "tool_name" field.
func (mu *MessageUpdate) ClearToolName() *MessageUpdate {
	mu.mutation.ClearToolName()
	return mu
}

// SetToolID sets the "tool_id" field.
func (mu *MessageUpdate) SetToolID(s string) *MessageUpdate {
	mu.mutation.SetToolID(s)
	return mu
}

// SetNillableToolID sets the "tool_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableToolID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetToolID(*s)
	}
	return mu
}

// ClearToolID clears the value of the "tool_id" field.
func (mu *MessageUpdate) ClearToolID() *MessageUpdate {
	mu.mutation.ClearToolID()
	return mu
}

// SetRole sets the "role" field.
func (mu *MessageUpdate) SetRole(t types.Role) *MessageUpdate {
	mu.mutation.SetRole(t)
	return mu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableRole(t *types.Role) *MessageUpdate {
	if t != nil {
		mu.SetRole(*t)
	}
	return mu
}

// SetUser sets the "user" field.
func (mu *MessageUpdate) SetUser(s string) *MessageUpdate {
	mu.mutation.SetUser(s)
	return mu
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableUser(s *string) *MessageUpdate {
	if s != nil {
		mu.SetUser(*s)
	}
	return mu
}

// ClearUser clears the value of the "user" field.
func (mu *MessageUpdate) ClearUser() *MessageUpdate {
	mu.mutation.ClearUser()
	return mu
}

// SetMime sets the "mime" field.
func (mu *MessageUpdate) SetMime(t types.MIME) *MessageUpdate {
	mu.mutation.SetMime(t)
	return mu
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableMime(t *types.MIME) *MessageUpdate {
	if t != nil {
		mu.SetMime(*t)
	}
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(b []byte) *MessageUpdate {
	mu.mutation.SetContent(b)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MessageUpdate) SetCreatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableCreatedAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if v, ok := mu.mutation.Role(); ok {
		if err := message.RoleValidator(string(v)); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Message.role": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Mime(); ok {
		if err := message.MimeValidator(string(v)); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "Message.mime": %w`, err)}
		}
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Thread(); ok {
		_spec.SetField(message.FieldThread, field.TypeString, value)
	}
	if value, ok := mu.mutation.ToolName(); ok {
		_spec.SetField(message.FieldToolName, field.TypeString, value)
	}
	if mu.mutation.ToolNameCleared() {
		_spec.ClearField(message.FieldToolName, field.TypeString)
	}
	if value, ok := mu.mutation.ToolID(); ok {
		_spec.SetField(message.FieldToolID, field.TypeString, value)
	}
	if mu.mutation.ToolIDCleared() {
		_spec.ClearField(message.FieldToolID, field.TypeString)
	}
	if value, ok := mu.mutation.Role(); ok {
		_spec.SetField(message.FieldRole, field.TypeString, value)
	}
	if value, ok := mu.mutation.User(); ok {
		_spec.SetField(message.FieldUser, field.TypeString, value)
	}
	if mu.mutation.UserCleared() {
		_spec.ClearField(message.FieldUser, field.TypeString)
	}
	if value, ok := mu.mutation.Mime(); ok {
		_spec.SetField(message.FieldMime, field.TypeString, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetThread sets the "thread" field.
func (muo *MessageUpdateOne) SetThread(s string) *MessageUpdateOne {
	muo.mutation.SetThread(s)
	return muo
}

// SetNillableThread sets the "thread" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableThread(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetThread(*s)
	}
	return muo
}

// SetToolName sets the "tool_name" field.
func (muo *MessageUpdateOne) SetToolName(s string) *MessageUpdateOne {
	muo.mutation.SetToolName(s)
	return muo
}

// SetNillableToolName sets the "tool_name" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableToolName(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetToolName(*s)
	}
	return muo
}

// ClearToolName clears the value of the "tool_name" field.
func (muo *MessageUpdateOne) ClearToolName() *MessageUpdateOne {
	muo.mutation.ClearToolName()
	return muo
}

// SetToolID sets the "tool_id" field.
func (muo *MessageUpdateOne) SetToolID(s string) *MessageUpdateOne {
	muo.mutation.SetToolID(s)
	return muo
}

// SetNillableToolID sets the "tool_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableToolID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetToolID(*s)
	}
	return muo
}

// ClearToolID clears the value of the "tool_id" field.
func (muo *MessageUpdateOne) ClearToolID() *MessageUpdateOne {
	muo.mutation.ClearToolID()
	return muo
}

// SetRole sets the "role" field.
func (muo *MessageUpdateOne) SetRole(t types.Role) *MessageUpdateOne {
	muo.mutation.SetRole(t)
	return muo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableRole(t *types.Role) *MessageUpdateOne {
	if t != nil {
		muo.SetRole(*t)
	}
	return muo
}

// SetUser sets the "user" field.
func (muo *MessageUpdateOne) SetUser(s string) *MessageUpdateOne {
	muo.mutation.SetUser(s)
	return muo
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableUser(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetUser(*s)
	}
	return muo
}

// ClearUser clears the value of the "user" field.
func (muo *MessageUpdateOne) ClearUser() *MessageUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// SetMime sets the "mime" field.
func (muo *MessageUpdateOne) SetMime(t types.MIME) *MessageUpdateOne {
	muo.mutation.SetMime(t)
	return muo
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableMime(t *types.MIME) *MessageUpdateOne {
	if t != nil {
		muo.SetMime(*t)
	}
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(b []byte) *MessageUpdateOne {
	muo.mutation.SetContent(b)
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MessageUpdateOne) SetCreatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableCreatedAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if v, ok := muo.mutation.Role(); ok {
		if err := message.RoleValidator(string(v)); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Message.role": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Mime(); ok {
		if err := message.MimeValidator(string(v)); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "Message.mime": %w`, err)}
		}
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Thread(); ok {
		_spec.SetField(message.FieldThread, field.TypeString, value)
	}
	if value, ok := muo.mutation.ToolName(); ok {
		_spec.SetField(message.FieldToolName, field.TypeString, value)
	}
	if muo.mutation.ToolNameCleared() {
		_spec.ClearField(message.FieldToolName, field.TypeString)
	}
	if value, ok := muo.mutation.ToolID(); ok {
		_spec.SetField(message.FieldToolID, field.TypeString, value)
	}
	if muo.mutation.ToolIDCleared() {
		_spec.ClearField(message.FieldToolID, field.TypeString)
	}
	if value, ok := muo.mutation.Role(); ok {
		_spec.SetField(message.FieldRole, field.TypeString, value)
	}
	if value, ok := muo.mutation.User(); ok {
		_spec.SetField(message.FieldUser, field.TypeString, value)
	}
	if muo.mutation.UserCleared() {
		_spec.ClearField(message.FieldUser, field.TypeString)
	}
	if value, ok := muo.mutation.Mime(); ok {
		_spec.SetField(message.FieldMime, field.TypeString, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
