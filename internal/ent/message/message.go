// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/pikocloud/pikobrain/internal/providers/types"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldThread holds the string denoting the thread field in the database.
	FieldThread = "thread"
	// FieldToolName holds the string denoting the tool_name field in the database.
	FieldToolName = "tool_name"
	// FieldToolID holds the string denoting the tool_id field in the database.
	FieldToolID = "tool_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the message in the database.
	Table = "messages"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldThread,
	FieldToolName,
	FieldToolID,
	FieldRole,
	FieldUser,
	FieldMime,
	FieldContent,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RoleValidator is a validator for the "role" field. It is called by the builders before save.
	RoleValidator func(string) error
	// DefaultMime holds the default value on creation for the "mime" field.
	DefaultMime types.MIME
	// MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	MimeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByThread orders the results by the thread field.
func ByThread(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThread, opts...).ToFunc()
}

// ByToolName orders the results by the tool_name field.
func ByToolName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToolName, opts...).ToFunc()
}

// ByToolID orders the results by the tool_id field.
func ByToolID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToolID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByUser orders the results by the user field.
func ByUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUser, opts...).ToFunc()
}

// ByMime orders the results by the mime field.
func ByMime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
