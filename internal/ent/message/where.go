// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/pikocloud/pikobrain/internal/ent/predicate"
	"github.com/pikocloud/pikobrain/internal/providers/types"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Thread applies equality check predicate on the "thread" field. It's identical to ThreadEQ.
func Thread(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldThread, v))
}

// ToolName applies equality check predicate on the "tool_name" field. It's identical to ToolNameEQ.
func ToolName(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToolName, v))
}

// ToolID applies equality check predicate on the "tool_id" field. It's identical to ToolIDEQ.
func ToolID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToolID, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRole, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUser, v))
}

// Mime applies equality check predicate on the "mime" field. It's identical to MimeEQ.
func Mime(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMime, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v []byte) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// ThreadEQ applies the EQ predicate on the "thread" field.
func ThreadEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldThread, v))
}

// ThreadNEQ applies the NEQ predicate on the "thread" field.
func ThreadNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldThread, v))
}

// ThreadIn applies the In predicate on the "thread" field.
func ThreadIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldThread, vs...))
}

// ThreadNotIn applies the NotIn predicate on the "thread" field.
func ThreadNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldThread, vs...))
}

// ThreadGT applies the GT predicate on the "thread" field.
func ThreadGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldThread, v))
}

// ThreadGTE applies the GTE predicate on the "thread" field.
func ThreadGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldThread, v))
}

// ThreadLT applies the LT predicate on the "thread" field.
func ThreadLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldThread, v))
}

// ThreadLTE applies the LTE predicate on the "thread" field.
func ThreadLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldThread, v))
}

// ThreadContains applies the Contains predicate on the "thread" field.
func ThreadContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldThread, v))
}

// ThreadHasPrefix applies the HasPrefix predicate on the "thread" field.
func ThreadHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldThread, v))
}

// ThreadHasSuffix applies the HasSuffix predicate on the "thread" field.
func ThreadHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldThread, v))
}

// ThreadEqualFold applies the EqualFold predicate on the "thread" field.
func ThreadEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldThread, v))
}

// ThreadContainsFold applies the ContainsFold predicate on the "thread" field.
func ThreadContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldThread, v))
}

// ToolNameEQ applies the EQ predicate on the "tool_name" field.
func ToolNameEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToolName, v))
}

// ToolNameNEQ applies the NEQ predicate on the "tool_name" field.
func ToolNameNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldToolName, v))
}

// ToolNameIn applies the In predicate on the "tool_name" field.
func ToolNameIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldToolName, vs...))
}

// ToolNameNotIn applies the NotIn predicate on the "tool_name" field.
func ToolNameNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldToolName, vs...))
}

// ToolNameGT applies the GT predicate on the "tool_name" field.
func ToolNameGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldToolName, v))
}

// ToolNameGTE applies the GTE predicate on the "tool_name" field.
func ToolNameGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldToolName, v))
}

// ToolNameLT applies the LT predicate on the "tool_name" field.
func ToolNameLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldToolName, v))
}

// ToolNameLTE applies the LTE predicate on the "tool_name" field.
func ToolNameLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldToolName, v))
}

// ToolNameContains applies the Contains predicate on the "tool_name" field.
func ToolNameContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldToolName, v))
}

// ToolNameHasPrefix applies the HasPrefix predicate on the "tool_name" field.
func ToolNameHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldToolName, v))
}

// ToolNameHasSuffix applies the HasSuffix predicate on the "tool_name" field.
func ToolNameHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldToolName, v))
}

// ToolNameIsNil applies the IsNil predicate on the "tool_name" field.
func ToolNameIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldToolName))
}

// ToolNameNotNil applies the NotNil predicate on the "tool_name" field.
func ToolNameNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldToolName))
}

// ToolNameEqualFold applies the EqualFold predicate on the "tool_name" field.
func ToolNameEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldToolName, v))
}

// ToolNameContainsFold applies the ContainsFold predicate on the "tool_name" field.
func ToolNameContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldToolName, v))
}

// ToolIDEQ applies the EQ predicate on the "tool_id" field.
func ToolIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldToolID, v))
}

// ToolIDNEQ applies the NEQ predicate on the "tool_id" field.
func ToolIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldToolID, v))
}

// ToolIDIn applies the In predicate on the "tool_id" field.
func ToolIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldToolID, vs...))
}

// ToolIDNotIn applies the NotIn predicate on the "tool_id" field.
func ToolIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldToolID, vs...))
}

// ToolIDGT applies the GT predicate on the "tool_id" field.
func ToolIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldToolID, v))
}

// ToolIDGTE applies the GTE predicate on the "tool_id" field.
func ToolIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldToolID, v))
}

// ToolIDLT applies the LT predicate on the "tool_id" field.
func ToolIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldToolID, v))
}

// ToolIDLTE applies the LTE predicate on the "tool_id" field.
func ToolIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldToolID, v))
}

// ToolIDContains applies the Contains predicate on the "tool_id" field.
func ToolIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldToolID, v))
}

// ToolIDHasPrefix applies the HasPrefix predicate on the "tool_id" field.
func ToolIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldToolID, v))
}

// ToolIDHasSuffix applies the HasSuffix predicate on the "tool_id" field.
func ToolIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldToolID, v))
}

// ToolIDIsNil applies the IsNil predicate on the "tool_id" field.
func ToolIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldToolID))
}

// ToolIDNotNil applies the NotNil predicate on the "tool_id" field.
func ToolIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldToolID))
}

// ToolIDEqualFold applies the EqualFold predicate on the "tool_id" field.
func ToolIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldToolID, v))
}

// ToolIDContainsFold applies the ContainsFold predicate on the "tool_id" field.
func ToolIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldToolID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...types.Role) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...types.Role) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v types.Role) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v types.Role) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContains(FieldRole, vc))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v types.Role) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasPrefix(FieldRole, vc))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v types.Role) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasSuffix(FieldRole, vc))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v types.Role) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldEqualFold(FieldRole, vc))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v types.Role) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContainsFold(FieldRole, vc))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldUser, v))
}

// UserIsNil applies the IsNil predicate on the "user" field.
func UserIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldUser))
}

// UserNotNil applies the NotNil predicate on the "user" field.
func UserNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldUser))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldUser, v))
}

// MimeEQ applies the EQ predicate on the "mime" field.
func MimeEQ(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMime, v))
}

// MimeNEQ applies the NEQ predicate on the "mime" field.
func MimeNEQ(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMime, v))
}

// MimeIn applies the In predicate on the "mime" field.
func MimeIn(vs ...types.MIME) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMime, vs...))
}

// MimeNotIn applies the NotIn predicate on the "mime" field.
func MimeNotIn(vs ...types.MIME) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMime, vs...))
}

// MimeGT applies the GT predicate on the "mime" field.
func MimeGT(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMime, v))
}

// MimeGTE applies the GTE predicate on the "mime" field.
func MimeGTE(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMime, v))
}

// MimeLT applies the LT predicate on the "mime" field.
func MimeLT(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMime, v))
}

// MimeLTE applies the LTE predicate on the "mime" field.
func MimeLTE(v types.MIME) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMime, v))
}

// MimeContains applies the Contains predicate on the "mime" field.
func MimeContains(v types.MIME) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContains(FieldMime, vc))
}

// MimeHasPrefix applies the HasPrefix predicate on the "mime" field.
func MimeHasPrefix(v types.MIME) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasPrefix(FieldMime, vc))
}

// MimeHasSuffix applies the HasSuffix predicate on the "mime" field.
func MimeHasSuffix(v types.MIME) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldHasSuffix(FieldMime, vc))
}

// MimeEqualFold applies the EqualFold predicate on the "mime" field.
func MimeEqualFold(v types.MIME) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldEqualFold(FieldMime, vc))
}

// MimeContainsFold applies the ContainsFold predicate on the "mime" field.
func MimeContainsFold(v types.MIME) predicate.Message {
	vc := string(v)
	return predicate.Message(sql.FieldContainsFold(FieldMime, vc))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v []byte) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v []byte) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...[]byte) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...[]byte) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v []byte) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v []byte) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v []byte) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v []byte) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
